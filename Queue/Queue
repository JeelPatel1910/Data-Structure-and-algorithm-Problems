class QNode
{
	 //A linked list (LL) node to store a queue entry
	int key ;
	QNode  next;
	
	// constructor to create a new linked list node
	public QNode(int key)
    {
	  this.key = key;
      this.next = null;	  
	 }	
}
// A class to represent a queue The queue,
// front stores the front node of LL and
// rear stores the last node of LL
class Queue
{
	QNode rear , front ; 
     public Queue()
	 {
		this.front=this.rear=null; 
	  }
	 
	 // Method to add an key to the queue.
	  void enqueue(int key)
	 {
	    QNode tmp = new QNode(key);     	 
	     if(this.rear==null)  
	    {
		   	 this.front=this.rear=tmp;
			 return;
		 }
		 
		  // Add the new node at the
        // end of queue and change rear
	       this.rear.next = tmp;
           this.rear=tmp;		   
	  }
    
        void dequeue()	
        {
		   if(this.front==null)   
		   {
			   return ;
		   }   
		   
		   // Store previous front and move front one node ahead
		   QNode tmp = this.front;
		   this.front = this.front.next;
		   
		   // If front becomes NULL, then change rear also as NULL
		   if(this.front==null)
		   {
			   this.rear=null;
		   }
		  }
	 
     public static void main(String args[])
	 {
		 Queue q = new Queue();
		 q. enqueue(25);
		 q.enqueue(25);
		 q.enqueue(20);
        q.dequeue();
        q.dequeue();
        q.enqueue(30);
        q.enqueue(40);
        q.enqueue(50);
        q.dequeue();
        System.out.println("Queue Front : " + q.front.key);
        System.out.println("Queue Rear : " + q.rear.key);
	 }
 }
